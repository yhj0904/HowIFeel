import React, { useState, useContext, useEffect } from "react";
import { View, StyleSheet, Dimensions } from "react-native";
import { Calendar } from "react-native-calendars";
import MoodTracker from "./MoodTracker.js";
import AsyncStorage from "@react-native-async-storage/async-storage";
import AuthContext from "../contexts/AuthContext";

const determineStorageKey = (isLoggedIn) => {
  return isLoggedIn ? "@LogtoDos" : "@toDos";
};

export default function MyCalendar() {
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedDates, setSelectedDates] = useState([]);
  const [todos, setTodos] = useState({});
  const { isLoggedIn } = useContext(AuthContext);
  const STORAGE_KEY = determineStorageKey(isLoggedIn);

  useEffect(() => {
    loadToDos();
  }, [selectedDates]);

  const handleDateSelect = (date) => {
    setSelectedDate(date.dateString);
  };

  const updateSelectedDates = (date) => {
    setSelectedDates((prevSelectedDates) => [...prevSelectedDates, date]);
    console.log("mycalendar", date);
  };

  const loadToDos = async () => {
    try {
      // const s = await AsyncStorage.getItem("@member");
      // const memberInfo = JSON.parse(s);
      //  setMemberInfo(memberInfo);
      const ds = await AsyncStorage.getItem(STORAGE_KEY); // 저장된 내용 불러오기
      const loadedToDos = JSON.parse(ds);
      setTodos(loadedToDos || {});
    } catch (e) {
      setTodos({});
    }
  };

  console.log(Object.values(todos).map((todo) => todo.date));

  return (
    <View style={styles.container}>
      <Calendar
        style={styles.calendar}
        onDayPress={handleDateSelect}
        markedDates={{
          [selectedDate]: {
            selected: true,
            dotColor: "blue",
            selectedDotColor: "blue",
          },
          ...Object.values(todos).reduce((markedDates, todo) => {
            markedDates[todo.date] = {
              marked: true,
              dotColor: "red",
              selected: selectedDate === todo.date,
              selectedDotColor: "blue",
            };
            return markedDates;
          }, {}),
        }}
      />
      {selectedDate && (
        <MoodTracker
          date={selectedDate}
          setSelectedDate={setSelectedDate}
          updateSelectedDates={updateSelectedDates}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  calendar: {
    width: Dimensions.get("window").width,
  },
});
